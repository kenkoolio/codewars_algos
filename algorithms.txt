// new codewars file starting March 4, 2017

3/4/17 (JavaScript)
  Description:

  You are given an array strarr of strings and an integer k. Your task is to return the first longest string consisting of k consecutive strings taken in the array.

  Example:

  longest_consec(["zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail"], 2) --> "abigailtheta"

  n being the length of the string array, if n = 0 or k > n or k <= 0 return "".


  // my solution
  function longestConsec(strarr, k) {
    'use strict';

    let n = strarr.length,
        strData = {},
        maxCount = 0,
        maxStr = "",
        maxIdx = 0;

    //check inputs
    if ((Object.prototype.toString.call(strarr) != '[object Array]') || (typeof(k) !== 'number') ||  (n === 0) || (k>n) || (k<=0)){
      return "";
    }

    //create data object
    for (let i = 0; i<n; i++){
      strData[i] = {};
      strData[i].string = strarr[i];
      strData[i].count = strarr[i].length;
    }

    //find combined length based on k
    for (let j = 0; j<n; j++){
      let inputObj = {},
          p = j+k;

      for (let m=j; m<p; m++){
        if(typeof(strData[m]) !== 'undefined'){
          inputObj[m] = strData[m];
        }
      }

      strData[j].comboLength = comboFunc( inputObj );
    }

    //find max string
    for (let r = 0; r<n; r++){
      if((strData[r].comboLength > maxCount) && (typeof(strData[r+(k-1)]) !== 'undefined')){
        maxCount = strData[r].comboLength;
        maxIdx = r;
      }
    }

    //combine max strings into single string
    for (let s = maxIdx; s<(maxIdx+k); s++){
      maxStr += strData[s].string;
    }

    return maxStr;

  }

  function comboFunc(strObj){
    let comboLength = 0;
    for (let entry in strObj) {
      if (strObj.hasOwnProperty(entry) && typeof(strObj[entry]) !== 'undefined'){
        comboLength += strObj[entry].count;
      }
    }
    return comboLength;
  }

  console.log(longestConsec(["yes", "Yes", "brownie", "kacie"], 2));


  //top solution #1 - jbchen

  function longestConsec(strarr, k) {
    var longest = "";
    for(var i=0;k>0 && i<=strarr.length-k;i++){
      var tempArray = strarr.slice(i,i+k);
      var tempStr = tempArray.join("");
      if(tempStr.length > longest.length){
        longest = tempStr;
      }
    }
    return longest;
  }

  //top solution #2 - ZozoFouchtra

  function longestConsec(strarr, k) {
  if( strarr.length==0 || k> strarr.length || k <1 ) return "";
  let lens = strarr.map( (_,i,arr) => arr.slice(i,i+k).join('').length ),
      i = lens.indexOf( Math.max(...lens) );
  return strarr.slice(i,i+k).join('')
  }

-----


3/15/17 (c#)

Title:
  Take a Number And Sum Its Digits Raised To The Consecutive Powers And ....Â¡Eureka!!

Description:
  The number 89 is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. What's the use of saying "Eureka"? Because this sum gives the same number.

  In effect: 89 = 8^1 + 9^2

  The next number in having this property is 135.

  See this property again: 135 = 1^1 + 3^2 + 5^3

  We need a function to collect these numbers, that may receive two integers a, b that defines the range [a, b] (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.

  Let's see some cases:

  If there are no numbers of this kind in the range [a, b] the function should output an empty list.

  Enjoy it!!


My Solution:
  using System;
  using System.Collections;
  using System.Collections.Generic;
  using System.Linq;

  public class SumDigPower {

      public static long[] SumDigPow(long a, long b)
      {
          List<long> eureka = new List<long>();
          long numOut;
          for (long i = a, j = b+1; i < b; i++)
          {
            long[] checkNumArr = SplitNumber(i);
            numOut = 0;
            for (long k = 0, m = checkNumArr.Length; k < m; k++)
            {
              long NumExp = (long)Math.Pow(checkNumArr[k], k+1);
              numOut += NumExp;
            }
            if (numOut == i)
            {
              eureka.Add(i);
            }
          }
          return eureka.ToArray();
      }

      //this method will split each digit in the number
      private static long[] SplitNumber (long numIn)
      {
          List<long> output = new List<long>();
          while ( numIn > 0 )
          {
            output.Add( numIn % 10 );
            numIn = numIn / 10;
          }
          output.Reverse();
          return output.ToArray();
      }
  }


Answer by: lokki
  using System;
  using System.Collections.Generic;
  using System.Linq;
  public class SumDigPower {

      public static long[] SumDigPow(long a, long b)
      {
          List<long> values = new List<long>();
          for (long x = a; x <= b; x++)
          {
            if (x.ToString().Select((c, i) => Math.Pow(Char.GetNumericValue(c), i + 1)).Sum() == x)
              values.Add(x);
          }
          return values.ToArray();
      }
  }


Answer by: parachutingturtle
  using System;
  using System.Collections.Generic;
  public class SumDigPower {

      public static long[] SumDigPow(long a, long b)
        {
          if (b < a)
            return new long[0];
          List<long> result = new List<long>();
          for (long i = a; i <= b; i++)
          {
            if (IsEureka(i))
              result.Add(i);
          }
          return result.ToArray();
        }

        public static bool IsEureka(long num)
        {
          int digitCount = 0;
          long i = num;
          while (i > 0)
          {
            digitCount++;
            i /= 10;
          }
          if (digitCount == 1)
            return true;
          long sum = 0;
          i = num;
          while (i > 0)
          {
            sum += (long)Math.Pow(i % 10, digitCount--);
            if (sum > num)
              return false;
            i /= 10;
          }
          return sum == num;
        }
  }


Answer by: Hiro3212
  using System;
  using System.Linq;
  using System.Collections.Generic;

  public class SumDigPower {

      public static long[] SumDigPow(long a, long b)
      {
          List<long> r = new List<long>();
          for(long l = a; l<=b; l++){
            int n = 1;
            long sum = 0;
            foreach(char c in (""+l)){
              sum+=(long)Math.Pow(Int64.Parse(""+c), n);
              n++;
            }
            if(sum==l){
              r.Add(l);
            }
          }
          return r.ToArray();
      }
  }


Answer by: vzagorenko
  using System;
  public class SumDigPower {

      public static long[] SumDigPow(long a, long b)
      {
          long[] result={};
          int rL=0;

        for(long i=a;i<=b;i++)
        {

          var S = i.ToString ().ToCharArray ();
          long I = 0;
          for(int n=0;n<S.Length;n++){
            int Sn = S [n]-48;
            I = I + (long)(Math.Pow(Sn,n+1));
            if (I > i) {
              break;
            }
          }
          if (I == i) {
            Array.Resize (ref result, ++rL);
            result [rL-1] = i;
          }
        }

        return result;
      }
  }

-----


4/25/17

Two to One

Instructions
Take 2 strings s1 and s2 including only letters from ato z. Return a new sorted string, the longest possible, containing distinct letters, - each taken only once - coming from s1 or s2.

Examples:

a = "xyaabbbccccdefww"
b = "xxxxyyyyabklmopq"
longest(a, b) -> "abcdefklmopqwxy"

a = "abcdefghijklmnopqrstuvwxyz"
longest(a, a) -> "abcdefghijklmnopqrstuvwxyz"

MY ANSWER (c#):

  using System;
  using System.Collections.Generic;
  using System.Linq;
  using System.Linq.Dynamic;
  using System.Text.RegularExpressions;

  public class TwoToOne
  {

  	public static string Longest (string s1, string s2)
    {
           // your code
          string comboStr = s1+s2;
          string[] stringArr = Regex.Split(comboStr, string.Empty);
          List<string> comboList = new List<string>();
          comboList.AddRange(stringArr);
          List<string> unique = comboList.Distinct().ToList();
          unique.Sort();
          return String.Join("", unique);
    }
  }



TOP ANSWER(By multiple people):

  using System.Linq;

  public class TwoToOne
  {

    public static string Longest (string s1, string s2)
    {
          return new string ((s1 +s2).Distinct().OrderBy(x=>x).ToArray ());
    }
  }
